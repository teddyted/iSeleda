/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pixelitor;

import static com.bric.swing.DialogFooter.strings;
import com.mongodb.BasicDBList;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import javax.swing.ImageIcon;

import java.util.List;
import java.util.Iterator;
import java.util.Set;
//import java.util.ArrayList;

import java.net.*;
import java.io.*;
import java.io.File;
import pixelitor.io.FileChoosers;
import pixelitor.NewImage;

import java.net.UnknownHostException;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.MongoClient;
import com.mongodb.QueryBuilder;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.Action;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import static jdk.nashorn.internal.objects.NativeObject.keys;
import pixelitor.io.FileExtensionUtils;
import pixelitor.io.OpenSaveManager;
import static pixelitor.io.OpenSaveManager.createCompositionFromFile;
import pixelitor.menus.file.RecentFilesMenu;
import pixelitor.utils.Utils;

/**
 *
 * @author teddyted
 */



public class numbersMain extends javax.swing.JFrame {

//    private ListModel model;
    
    public static String[] listAr;
    public int index;

    /**
     * category that comes from Categories.java
     */
    public static String cat;
    public File f;

    public void setCat(String Cat)
    {
        System.out.println(Cat + " OOOOOOO");
        cat = Cat;
    }

    public static String getCat()
    {
        return cat;
    }

    /*public void setCat(String Cat) {
        System.out.println(Cat + " OOOOOOO");
        
        cat = Cat;
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private String getCat(){
        return cat;
    }*/
    
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) { 
        JList list = (JList)evt.getSource();
        index = list.locationToIndex(evt.getPoint());
//        System.out.println(listAr[index]);
        
        jMainImage.setToolTipText("");
        jMainImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/name/" + listAr[index] + ".png"))); // NOI18N
        // TODO add your handling code here:
    }    
    
    /**
     * Creates new form numbersDictionary
     * @param category
     */
    public numbersMain(String category) {
        cat = category;
/*        System.out.println(cat + "111111");
        String currentCat = getCat();
*/        initComponents();

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jMainImage = new javax.swing.JLabel();
        
        jImportButton = new javax.swing.JButton();
        

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
        setTitle("Numbers حاجب");
        setBackground(new java.awt.Color(255, 255, 0));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(204, 0, 51));
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchActionPerformed(evt);
            }
        });
        
        jTextPane1.setText(getCat() + " رمز");
        jScrollPane2.setViewportView(jTextPane1);

        jButton1.setText("Main Graphic اندهش");
        jButton1.setActionCommand("MainGraphic");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sign Graphic فجأة - فوجئ");
        jButton2.setActionCommand("Sign Graphic");
        
        jImportButton.setText("Import");
        jImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jImportButtonActionPerformed(evt);
            }
        });
        
        // Getting Numbers From Mongo
        Mongo mongo = null;
        DB db=null;
        DBCollection table=null;
        
        // Connection to the MongoDB-Server
//        try {
            mongo = new MongoClient("127.0.0.1", 27017);
//        } catch (UnknownHostException e) {
//            e.printStackTrace();
//        } 
        
        //get the connections
        db= mongo.getDB("idcrtt");
        //table = db.getCollection("masterlist3");
        table = db.getCollection("msl_master");
        BasicDBObject searchQuery = new BasicDBObject();
        BasicDBObject fields = new BasicDBObject("Arabe",1);
        //BasicDBObject query = new BasicDBObject("{age: 34 }");
        DBCursor cursor = table.find(searchQuery,fields);
        
        int numResults = cursor.count();
        int counter=0;

        BasicDBObject query2 = new BasicDBObject("Category\nEnglish", new BasicDBObject("$eq", cat));

        try (DBCursor cursor2 = table.find(query2)) {
            listAr = new String[numResults];
            while(cursor2.hasNext())
            {
                //System.out.println(cursor2.next().get("Arabe").toString());
                listAr[counter] = cursor2.next().get("Arabe").toString();
                counter++;
            }
        }
        
/*        
        String queryCat = getCat();
        System.out.println(queryCat + " OOOOOOOPPPPPAAAAAA");
        System.out.println(cat+ " PPUUUUUBBLLLIICCCC");
        
        listAr = new String[numResults];
        while (cursor.hasNext()) {
            listAr[counter] = cursor.next().get("Arabe").toString();
//            System.out.println(cursor.next().get("Arabe"));
//            System.out.println(listAr[counter]);
            counter++;

        }
*/        
/*        	
Using QueryBuilder your query should look like this

DBObject query = QueryBuilder.start().or(
    QueryBuilder.start("key1").in(764).get(),
    QueryBuilder.start("key2").in(keys).get(),
    QueryBuilder.start().and("key3").is(3).and("key4").is(64).get()
 ).get();
Consider using jongo (an API over mongo-java-driver) you can simply copy/paste queries from the shell :

collection.findOne("{$or:[{key1: {$in:[764]}},{key2:{$in:[#]}}, {$and:[{key3:3},{key4:67}]}]}", keys).as(People.class);
*/
        DBObject query = QueryBuilder.start().or(
            QueryBuilder.start("key1").in(764).get(),
            QueryBuilder.start("key2").in("Numbers").get(),
            QueryBuilder.start().and("key3").is(3).and("key4").is(64).get()
         ).get();



         // END MONGO CONNECT TO FETCH DATA
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
//            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            @Override
            public int getSize() { return listAr.length; }
            @Override
            public String getElementAt(int i) { return listAr[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
//        System.out.println(e);
        //String[] aList = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
        //aList= append(aList, "Item 6");
 /*       String date = "2014-05-03";
        List<String> dateList = new ArrayList<>();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        for (int i = 0; i < 6; i++) {

            Date dateParsed = sdf.parse(date);
            dateParsed.setDate(dateParsed.getDate() - i);
            dateList.add(sdf.format(dateParsed));
        }
        System.out.println(dateList);*/
        
        /*ArrayList<String> ar = new ArrayList<>();
        String s1 ="Test1";
        String s2 ="Test2";
        String s3 ="Test3";
        ar.add(s1);
        ar.add(s2);
        ar.add(s3);

        String s4 ="Test4";
        ar.add(s4);

        System.out.println(ar);*/
/*
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
*/        
//        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            //String[] strings = wordList;
            //String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            
            //strings[]=append(strings,"Item 6");
///            @Override
//            public int getSize() { return strings.length; }
            //public int getSize() { return wordList.length; }
 //           @Override
//            public String getElementAt(int i) { return strings[i]; }
///        });
        // ADDING MAIN IMAGE LABEL
        jMainImage.setText("");
        
        
        jScrollPane3.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(114, 114, 114)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jMainImage, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(225, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jMainImage, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jButton1.getAccessibleContext().setAccessibleName("Main Graphic");
        jButton2.getAccessibleContext().setAccessibleName("Sign Graphic");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/IDCRTT/dictionary.png"))); // NOI18N
        jLabel2.setToolTipText("");
        jLabel2.setMaximumSize(new java.awt.Dimension(800, 600));
        jLabel2.setMinimumSize(new java.awt.Dimension(800, 600));
        jLabel2.setPreferredSize(new java.awt.Dimension(800, 600));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jLabel2, gridBagConstraints);

        pack();
        
    }// </editor-fold>                        

    private void jSearchActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }

    /**
     *
     * @param evt
     */
    public void jImportButtonActionPerformed(java.awt.event.ActionEvent evt ) {                                         
        // Close the Dictionary and import the graphic to the canvas
        // If canvas is not there create one
        // Or else add to the existing canvas
        //System.out.println(".png" + "/images/name/" + listAr[index]);
        //
        this.setVisible(false);
        //JList list = (JList)evt.getSource();
        //int index = list.locationToIndex(evt.getPoint());
//        System.out.println(listAr[index]);
        FileChoosers FileChoosers = new FileChoosers();
        

        
        //File f = new File(getClass().getResource("/images/name/" + listAr[index] + ".png").toURI());;
        try {
          f = new File(getClass().getResource("/images/name/" + listAr[index] + ".png").toURI());
        } catch(URISyntaxException e) {
          File fi;
            fi = new File(getClass().getResource("/images/name/" + listAr[index] + ".png").getPath());
        }


        OpenSaveManager.openFile(f);
       /* assert SwingUtilities.isEventDispatchThread();
        Runnable r = () -> {
            Composition comp = createCompositionFromFile(f);
            if(comp != null) { // there was no decoding problem
                PixelitorWindow.getInstance().addComposition(comp);
            }
        };
        Utils.executeWithBusyCursor(r);*/

       // RecentFilesMenu.getInstance().addFile(f);
/*            if (FileExtensionUtils.isSupportedExtension(f, FileExtensionUtils.SUPPORTED_INPUT_EXTENSIONS)) {
                OpenSaveManager.openFile(f);
            } else { // unsupported extension
                // handleUnsupportedExtensionLoading(f);
            }

        Action openAction = new MenuAction("Open...") {
            @Override
            void onClick() {
                Action openAction = FileChoosers.open();
            }
        };
        
        ------------------------- 
        jMainImage.setToolTipText("TEXT CHOSEN");
        jMainImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/name/" + listAr[index+1] + ".png")));
        */
        
        //jMainImage.setToolTipText("");
        //jMainImage.setText(listAr[index]);
        //getClass().getResource("/images/name/" + listAr[index] + ".png"
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(numbersDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(numbersDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(numbersDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(numbersDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new numbersDictionary().setVisible(true);

            }
        });
        

    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel jMainImage;
    private javax.swing.JButton jImportButton;
    // End of variables declaration                   


    /* TED MSL DICT */
    //App Icon (Task Bar)
////	public static ImageIcon ico = new ImageIcon(Main.class.getResource("/images/Dictionary_ico.png"));
	
	//From the new dictStem :	AR/EN/File/Polysemy/Chararcters
	public static ArrayList<WordDict> wordDictList = new ArrayList<>();

	//Dictionary Variable
	public static String DictStem =  "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/includes/dictStem_AR.txt"; 
//	System.out.println( "JRE Version :" + System.getProperty( "java.runtime.version" ) );
//        System.out.println( "JVM Bit size: " + System.getProperty( "sun.arch.data.model" ) );
	//Mulimedia Library
    	public static String DictSign = "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/tedlib/images/dictSign"; // C:/signs/images/dictSign";
	public static String Signs = "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/tedlib/images/signs"; //C:/signs/images/signs";
	public static String CatFiles = "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/tedlib/dict/category"; // C:/signs/dict/category/";	//Categories Files.
	public static String CatSign = "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/tedlib/dict/category/Categ_icons"; // "C:/signs/dict/category/Categ_icons";	//Categories signs.
	
	public static String BigVideo = "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/tedlib/videos/bigVideo"; // "C:\\signs\\videos\\bigVideo";
	public static String BigVideoSon = "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/tedlib/videos/bigVideoSon";// "C:\\signs\\videos\\bigVideoSon";
	public static String ShortVideo = "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/tedlib/videos/shortVideo"; // "C:\\signs\\videos\\shortVideo";
	public static String Audio = "/Users/teddyted/NetBeansProjects/MSL_APP/Code/Dictionary/src/tedlib/audio"; // C:\\signs\\audio";
	
	//Order : AR/EN/File/Polysemy/Chararcters
	public static void FillWordDictLict(){
		System.out.println("Start Reading Dictionary ...");
		try {
			InputStreamReader in = new InputStreamReader(new FileInputStream(numbersDictionary.DictStem), "UTF-8");
			BufferedReader buff = new BufferedReader(in);
			String line = "";
			String tab [] = new String[5];

			while((line = buff.readLine()) != null){
				WordDict word = new WordDict();
				tab = line.split("\t");

				//Specifying the Arabic word
				word.setWord_AR(tab[0]);

				//Specifying the corresponding English translation :
				word.setWord_EN(tab[1].substring(1, tab[1].length()-1));

				//Specifying the corresponding file
				if(tab[2].equals("[]")){
					if(tab[4].equals("[]")){
						word.setFile(tab[0]);
					}else{
						word.setFile(tab[0].trim()+" ("+tab[4].substring(1, tab[4].length()-1).trim()+")");
					}
				}else{
					word.setFile(tab[2].substring(1, tab[2].length()-1));
				}

				//Specifying the corresponding Characteristic 
				word.setCharacter(tab[4].substring(1, tab[4].length()-1));

				//Specifying the corresponding Polysemy 
				if(! tab[3].equals("[]")){
					String polysemy[] = tab[3].substring(1, tab[3].length()-1).split("/");
                                    for (String polysemy1 : polysemy) {
                                        word.addPolysemy(polysemy1);
                                    }
				}

				wordDictList.add(word);
                                //System.out.println(">>"+word+"<<");
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
                //System.out.println(wordDictList);
		//System.out.println("End Reading Dictionary.");
	}


    


    private static class Word {

        public Word() {
        }

        private void setEnglish(String eName) {
            String ename = eName;
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        private void setArab(String arabe) {
            String Arabe = arabe;
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }


}
