/*
 * Copyright 2010-2014 Laszlo Balazs-Csiki
 *
 * This file is part of Pixelitor. Pixelitor is free software: you
 * can redistribute it and/or modify it under the terms of the GNU
 * General Public License, version 3 as published by the Free
 * Software Foundation.
 *
 * Pixelitor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Pixelitor.  If not, see <http://www.gnu.org/licenses/>.
 */
package pixelitor;

import org.jdesktop.swingx.JXCategory;
import org.jdesktop.swingx.tips.CategoryLoader;
import org.jdesktop.swingx.tips.CategoryModel;
import pixelitor.utils.AppPreferences;
import pixelitor.utils.Dialogs;

import javax.swing.*;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.prefs.Preferences;


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;



public class Categories extends javax.swing.JFrame {

    /**
     * Creates new form NumberAddition
     */
    public Categories() {
        initComponents();
    }

        @SuppressWarnings("unchecked")

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        templatesButton = new javax.swing.JButton();
        numbersButton = new javax.swing.JButton();
        introVideoButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(0, 255));
        setMinimumSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setBounds(new java.awt.Rectangle(0, 0, 800, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));
        jPanel1.setLayout(null);

        numbersButton.setBackground(new java.awt.Color(204, 0, 51));
        numbersButton.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        numbersButton.setText("Family");
        numbersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numbersButtonActionPerformed(evt);
            }
        });
        jPanel1.add(numbersButton);
        numbersButton.setBounds(40, 190, 140, 50);

        numbersButton.setText("Numbers");
        jPanel1.add(numbersButton);
        numbersButton.setBounds(10, 100, 190, 70);
        numbersButton.getAccessibleContext().setAccessibleName("pixelitor");

        introVideoButton.setText("Video");
        introVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                introVideoButtonActionPerformed(evt);
            }
        });
        jPanel1.add(introVideoButton);
        introVideoButton.setBounds(650, 520, 79, 29);

        backButton.setText("Back");
        backButton.setToolTipText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton);
        backButton.setBounds(70, 520, 75, 29);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/IDCRTT/dictionary_categories_ar.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 755, 567);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 800, 600);

        pack();
    }// </editor-fold>                        
    private static final Logger LOG = Logger.getLogger(Categories.class.getName());

    private void numbersButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        this.setVisible(false);
        numbersMain nMain = new numbersMain("Numbers");
        nMain.setVisible(true);
    }

    private void introVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Video frame showing intro.mp4
        //close(); //ne radi
        //NumberAddition.dispose(); //ne radi
        this.setVisible(false); //radi
///        IntroVideo IntroVideo = new IntroVideo();
///        IntroVideo.setVisible(true);
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // Back button
        this.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void showCategories() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Categories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Categories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Categories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Categories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Categories().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton backButton;
    private javax.swing.JButton introVideoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton numbersButton;
    private javax.swing.JButton templatesButton;
    // End of variables declaration                   
}

/*
public class Categories extends JDialog implements ActionListener {
  public Categories(JFrame parent, String title, String message) {
    super(parent, title, true);
    if (parent != null) {
      Dimension parentSize = parent.getSize(); 
      Point p = parent.getLocation(); 
      setLocation(p.x + parentSize.width / 4, p.y + parentSize.height / 4);
    }
    JPanel messagePane = new JPanel();
    messagePane.add(new JLabel(message));
    getContentPane().add(messagePane);
    JPanel buttonPane = new JPanel();
    
    JButton button = new JButton("OK"); 
    buttonPane.add(button); 
    button.addActionListener(this);
    getContentPane().add(buttonPane, BorderLayout.SOUTH);
    setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    
    pack(); 
    setVisible(true);
  }
  public void actionPerformed(ActionEvent e) {
    setVisible(false); 
    dispose(); 
  }
  public static void showCategories() {
    Categories dlg = new Categories(new JFrame(), "title", "message");
  }
}

/*
    
public class Categories {
    private static final Preferences tipPrefs = AppPreferences.getMainUserNode();

    private static int nextCategory = -1;

    private static final String NEXT_TIP_NR_KEY = "next_tip_nr";

    private Categories() {
    }

    public static void showCategories(JFrame parent, boolean force) {

        try {
            if (nextCategory == -1) {
                nextCategory = tipPrefs.getInt(NEXT_TIP_NR_KEY, 0);
            }

            CategoryModel CategoryModel = loadModel();
            int categoryCount = CategoryModel.getCategoryCount();
            if (nextCategory < 0) {
                nextCategory = 0;
            }
            if (nextCategory > categoryCount - 1) {
                nextCategory = categoryCount - 1;
            }

            JXCategory category = new JXCategory(CategoryModel);
            category.setCurrentCategory(nextCategory);
            category.showDialog(parent, tipPrefs, force);  // this stops until the user hits close

            int lastCategoryIndex = category.getCurrentCategory();
            if (lastCategoryIndex < categoryCount - 1) {
                nextCategory = lastCategoryIndex + 1;
            } else {
                nextCategory = 0;
            }
        } catch (IOException ex) {
            Dialogs.showExceptionDialog(ex);
        }
    }

    private static CategoryModel loadModel() throws IOException {
        Properties properties = new Properties();
        InputStream propertiesInputStream = Categories.class.getResourceAsStream("/categories.properties");
        properties.load(propertiesInputStream);
        CategoryModel model = CategoryLoader.load(properties);
        propertiesInputStream.close();
        return model;
    }

    public static void saveNextCategoryNr() {
        tipPrefs.putInt(NEXT_TIP_NR_KEY, nextCategory);
    }
}
*/